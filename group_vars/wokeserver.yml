nodejs_version: "14.x"
xorg_conf: xorg.nvidia.conf.j2
channel_name: woke
stream_width: 1920
stream_height: 1080
stream_delay: 10
stream_segment_duration: 2
grid_count: 6
curators_srt_out_uri: "srt://:5000?mode=listener"
streambackup_srt_in_uri: "srt://127.0.0.1:5000?mode=caller"
streamdelay_hostname: "localhost"
streamdelay_port: 8404
streamwall_control_address: "https://{{ inventory_hostname }}"
streamwall_control_hostname: "localhost"
streamwall_control_port: 8000
streamwall_announce_username: "redirect"
streamwall_announce_color: "#ff0000"
streamwall_announce_template: "SingsMic Active Feed: <%- stream.source %> <%- stream.city && stream.state ? `(${stream.city} ${stream.state})` : '' %> <%- stream.link %>"
streamwall_announce_interval: 120
streamwall_announce_delay: 20

streamdelay_in_pipeline: |
  # Capture Streamwall X window video
  ximagesrc show-pointer=false xname="Streamwall" use-damage=false ! video/x-raw,framerate=30/1 ! videoconvert ! queue ! identity name="videoinput"
  # Capture pulseaudio audio and apply dynamic range compression
  pulsesrc ! audioconvert ! ladspa-sc4-1882-so-sc4 threshold-level=-5 ratio=4 makeup-gain=10 ! ladspa-fast-lookahead-limiter-1913-so-fastlookaheadlimiter limit=-3 ! queue ! audioconvert ! audio/x-raw,channels=1 ! identity name="audioinput"

streamdelay_out_pipeline: |
  # Queue outputs from streamdelay
  audioqueue. ! tee name=audiotee
  videoqueue. ! tee name=videotee

  # Encode Opus audio and send to shaka-packager
  audiotee. ! queue ! audioconvert ! audioresample ! opusenc ! opusparse ! webmmux streamable=true min-cluster-duration=0 ! filesink location=/home/streamwall/ipc/packager-opus

  # Encode AAC audio (used by DASH/HLS and RTMP outputs)
  audiotee. ! queue ! voaacenc bitrate=96000 ! aacparse ! queue ! tee name=aactee

  # Send AAC audio and send to shaka-packager
  aactee. ! queue ! mp4mux faststart=true fragment-duration=1000 ! filesink location=/home/streamwall/ipc/packager-aac

  # Encode VP9 and send to shaka-packager
  videotee. ! queue max-size-buffers=0 max-size-time=0 max-size-bytes=100000000 leaky=downstream ! vp9enc target-bitrate=4500 end-usage=cq cq-level=6 cpu-used=7 deadline=1 min-quantizer=4 max-quantizer=38 lag-in-frames=0 keyframe-max-dist=60 ! webmmux streamable=true min-cluster-duration=0 ! filesink location=/home/streamwall/ipc/packager-vp9-1080
  videotee. ! queue max-size-buffers=0 max-size-time=0 max-size-bytes=100000000 leaky=downstream ! videoconvert ! videoscale ! video/x-raw,width=1280,height=720 ! vp9enc target-bitrate=2500 end-usage=cq cq-level=6 cpu-used=7 deadline=1 min-quantizer=4 max-quantizer=38 lag-in-frames=0 keyframe-max-dist=60 ! webmmux streamable=true min-cluster-duration=0 ! filesink location=/home/streamwall/ipc/packager-vp9-720
  videotee. ! queue max-size-buffers=0 max-size-time=0 max-size-bytes=100000000 leaky=downstream ! videoconvert ! videoscale ! video/x-raw,width=855,height=480 ! vp9enc target-bitrate=1000 end-usage=cq cq-level=6 cpu-used=7 deadline=1 min-quantizer=4 max-quantizer=38 lag-in-frames=0 keyframe-max-dist=60 ! webmmux streamable=true min-cluster-duration=0 ! filesink location=/home/streamwall/ipc/packager-vp9-480
  videotee. ! queue max-size-buffers=0 max-size-time=0 max-size-bytes=100000000 leaky=downstream ! videoconvert ! videoscale ! video/x-raw,width=640,height=360 ! vp9enc target-bitrate=500 end-usage=cq cq-level=6 cpu-used=7 deadline=1 min-quantizer=4 max-quantizer=38 lag-in-frames=0 keyframe-max-dist=60 ! webmmux streamable=true min-cluster-duration=0 ! filesink location=/home/streamwall/ipc/packager-vp9-360

  # Encode H.264 1080p 5500kbps stream for DASH/HLS and to send to RTMP outputs
  videotee. ! queue max-size-buffers=0 max-size-time=0 max-size-bytes=100000000 leaky=downstream ! nvh264enc bitrate=5500 preset=hq rc-mode=cbr gop-size=60 ! h264parse config-interval=2 ! queue ! tee name=primaryh264tee

  # Send H.264 1080p to shaka-packager
  primaryh264tee. ! queue ! mp4mux faststart=true fragment-duration=1000 ! filesink location=/home/streamwall/ipc/packager-h264-1080

  # Encode other H.264 streams and send to shaka-packager
  videotee. ! queue max-size-buffers=0 max-size-time=0 max-size-bytes=100000000 leaky=downstream ! videoconvert ! videoscale ! video/x-raw,width=1280,height=720 ! nvh264enc bitrate=4000 preset=hq rc-mode=cbr gop-size=60 ! h264parse config-interval=2 ! mp4mux faststart=true fragment-duration=1000 ! filesink location=/home/streamwall/ipc/packager-h264-720
  videotee. ! queue max-size-buffers=0 max-size-time=0 max-size-bytes=100000000 leaky=downstream ! videoconvert ! videoscale ! video/x-raw,width=854,height=480 ! nvh264enc bitrate=2000 preset=hq rc-mode=cbr gop-size=60 ! h264parse config-interval=2 ! mp4mux faststart=true fragment-duration=1000 ! filesink location=/home/streamwall/ipc/packager-h264-480
  videotee. ! queue max-size-buffers=0 max-size-time=0 max-size-bytes=100000000 leaky=downstream ! videoconvert ! videoscale ! video/x-raw,width=640,height=360 ! nvh264enc bitrate=1000 preset=hq rc-mode=cbr gop-size=60 ! h264parse config-interval=2 ! mp4mux faststart=true fragment-duration=1000 ! filesink location=/home/streamwall/ipc/packager-h264-360

  # Encode 9000 kbps "curator stream" for archival and monitoring
  videotee. ! queue max-size-buffers=0 max-size-time=0 max-size-bytes=100000000 leaky=downstream ! nvh264enc bitrate=9000 preset=hq rc-mode=cbr gop-size=60 ! h264parse config-interval=2 ! queue ! srtmux.
  aactee. ! queue ! srtmux.
  mpegtsmux name=srtmux ! queue ! srtsink name=curators-out uri={{ curators_srt_out_uri }} wait-for-connection=false

  # Mux for RTMP outputs
  flvmux name=rtmpflvmux streamable=true ! queue ! tee name=rtmpflvtee
  primaryh264tee. ! queue ! rtmpflvmux.
  aactee. ! queue ! rtmpflvmux.

  # Send to RTMP outputs
  {% for rtmp in stream_rtmp_destinations %}
  rtmpflvtee. ! queue ! rtmpsink enable-last-sample=false location="{{ rtmp.url }} live=1"
  {% endfor %}

streamdelay_out_script: |
  rm -f /home/streamwall/live/*;
  TS=$(date +%s);
  /home/streamwall/packager-linux \
    "in=/home/streamwall/ipc/packager-opus,stream=audio,bw=64000,init_segment=/home/streamwall/live/opus_${TS}_init.webm,segment_template=/home/streamwall/live/opus_${TS}_\\$Number$.webm" \
    "in=/home/streamwall/ipc/packager-aac,stream=audio,bw=96000,init_segment=/home/streamwall/live/aac_${TS}_init.mp4,segment_template=/home/streamwall/live/aac_${TS}_\\$Number$.m4s,hls_group_id=audio" \
    "in=/home/streamwall/ipc/packager-vp9-1080,stream=video,bw=4500000,init_segment=/home/streamwall/live/vp9_1080p_${TS}_init.webm,segment_template=/home/streamwall/live/vp9_1080p_${TS}_\\$Number$.webm" \
    "in=/home/streamwall/ipc/packager-vp9-720,stream=video,bw=2500000,init_segment=/home/streamwall/live/vp9_720p_${TS}_init.webm,segment_template=/home/streamwall/live/vp9_720p_${TS}_\\$Number$.webm" \
    "in=/home/streamwall/ipc/packager-vp9-480,stream=video,bw=1000000,init_segment=/home/streamwall/live/vp9_480p_${TS}_init.webm,segment_template=/home/streamwall/live/vp9_480p_${TS}_\\$Number$.webm" \
    "in=/home/streamwall/ipc/packager-vp9-360,stream=video,bw=500000,init_segment=/home/streamwall/live/vp9_360p_${TS}_init.webm,segment_template=/home/streamwall/live/vp9_360p_${TS}_\\$Number$.webm" \
    "in=/home/streamwall/ipc/packager-h264-1080,stream=video,bw=5500000,init_segment=/home/streamwall/live/h264_1080p_${TS}_init.mp4,segment_template=/home/streamwall/live/h264_1080p_${TS}_\\$Number$.m4s" \
    "in=/home/streamwall/ipc/packager-h264-720,stream=video,bw=4000000,init_segment=/home/streamwall/live/h264_720p_${TS}_init.mp4,segment_template=/home/streamwall/live/h264_720p_${TS}_\\$Number$.m4s" \
    "in=/home/streamwall/ipc/packager-h264-480,stream=video,bw=2000000,init_segment=/home/streamwall/live/h264_480p_${TS}_init.mp4,segment_template=/home/streamwall/live/h264_480p_${TS}_\\$Number$.m4s" \
    "in=/home/streamwall/ipc/packager-h264-360,stream=video,bw=1000000,init_segment=/home/streamwall/live/h264_360p_${TS}_init.mp4,segment_template=/home/streamwall/live/h264_360p_${TS}_\\$Number$.m4s" \
    --mpd_output /home/streamwall/live/dash.mpd --allow_approximate_segment_timeline \
    --hls_master_playlist_output /home/streamwall/live/hls.m3u8 --hls_playlist_type=live \
    --utc_timings=urn:mpeg:dash:utc:http-head:2014={{ stream_endpoint }}/dash.mpd \
    --segment_duration={{ stream_segment_duration }} --min_buffer_time={{ stream_segment_duration }} --suggested_presentation_delay={{ stream_segment_duration * 2 }} --minimum_update_period={{ stream_segment_duration }} --time_shift_buffer_depth=60 --preserved_segments_outside_live_window=10
